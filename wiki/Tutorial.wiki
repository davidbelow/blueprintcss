#summary Here's a quick tutorial on how you start using Blueprint.
#labels Featured,Phase-Deploy

In addition to the tutorial below, this [http://www.blueflavor.com/blog/design/blueprintcss_101.php tutorial by Blueflavor] gives you a good intro to Blueprint.

===Installation===
Blueprint should be put in your site's CSS directory. After you've done that, add these two lines to the <head> of your pages. Remember to make sure the href path is correct:

{{{
<link rel="stylesheet" href="css/blueprint/screen.css" type="text/css" media="screen, projection">
<link rel="stylesheet" href="css/blueprint/print.css" type="text/css" media="print">	
<!--[if IE]><link rel="stylesheet" href="css/blueprint/lib/ie.css" type="text/css" media="screen, projection"><![endif]-->
}}}

BP is now ready for consumption.

===Files in Blueprint===
The framework has a few files you should sift through. Most files are heavily commented, so that their content should be easy to grasp.

  * *screen.css*: This is the main file of the framework. It imports other CSS files from the "lib" directory, and should be included on every page.
  * *print.css*: This file sets some default print rules, so that printed versions of your site looks better than they usually would.

  * *lib/grid.css*: This file sets up the grid (it's true). It has a lot of classes you apply to divs to set up any sort of column-based grid. 
  * *lib/typography.css*: This file sets some default typography. It also has a few methods for some really fancy stuff to do with your text, so be sure to check it out.
  * *lib/reset.css*: This file resets every default CSS value that browsers tend to set for you.
  * *lib/buttons.css*: A bundled package for creating great CSS/HTML buttons.
  * *lib/compressed.css*: A compressed version, containing all of the lib/ files. Should be used on live projects. See screen.css for instructions.



There are some images as well, that you can use as backgrounds to see the grid and/or baseline. See screen.css for details

===Using Blueprint===
The best way to see how BP is used, is to go through the commented CSS files, or the source code for the example page, which is bundled with the download. However, here are some of the basics:

===The typography===
Typography.css does not need any customization: just drop it in, and it'll give you some nice default text styles.

The typography.css file also sets a baseline (line-height) of 18px. This means that every element, from line-heights to images has to have a height that is a multiple of 18. This may seem a bit tedious, but the results tend to look great. For more about using a baseline, check out [http://www.alistapart.com/articles/settingtypeontheweb this article] at A List Apart.

Print.css has some options where you can fill in your domain name, so that relative links are shown in parenthesis behind the text link on print. Without filling in your domain name, only remote URLs work properly.

====The grid====
By default, the grid is 950px wide, with 24 columns spanning 30px, and a 10px margin between columns.

If you need fewer or more columns, use this formula to find the new total width:

{{{
Total width = (columns * 40) - 10
}}}

The first thing you do, is surround your grid with a container:

{{{
<div class="container">
	<p>Here's my site!</p>
</div>
}}}

You then use div's with the class "column" and additional classes to tell how that column should look. Here are some examples:

{{{
<div class="container">
	<div class="column span-24">
		Header
	</div>
	<div class="column span-4">
		Left sidebar
	</div>
	<div class="column span-16">
		Main content
	</div>
	<div class="column span-4 last">
		Right sidebar
	</div>	
</div>
}}}

Notice the "last" class, which every last element inside a container or another column needs.

You can also nest columns any way you want. Check out this file and this file for some more advanced examples of using grid.css. Here's one example of nesting columns:

{{{
<div class="container">
	<div class="column span-24">
		Header
	</div>
	<div class="column span-4">
		Left sidebar
	</div>
	
	<div class="column span-16">
		<div class="column span-8">
			Box1
		</div>
		<div class="column span-4">
			Box2
		</div>
		<div class="column span-4 last">
			Box3
		</div>
		<div class="column span-16 first last">
			Main content
		</div>
	</div>
	
	<div class="column span-4 last">
		Right sidebar
	</div>
	<div class="column span-24">
		Footer
	</div>
</div>
}}}

Again, this is pretty simple when you get the hang of it. Just remember the "last" class, and you should be fine.

Grid.css can do a lot more than this, however. You can prepend and append empty columns, pull or push images across columns, add borders between columns, and use multiple containers to create almost any layout. Check out the comments in grid.css and the example pages for more information